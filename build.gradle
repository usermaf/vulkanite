@@ -38,8 +38,8 @@ dependencies {
    modImplementation("net.fabricmc.fabric-api:fabric-rendering-data-attachment-v1:0.3.38+73761d2e9a")
    modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))

    modImplementation "maven.modrinth:sodium:mc1.20.1-0.5.8"
    modImplementation "maven.modrinth:iris:1.7.0+1.20.1"
    modImplementation "maven.modrinth:sodium:mc1.20.4-0.5.8"
    modImplementation "maven.modrinth:iris:1.7.0+1.20.4"

    modRuntimeOnly 'org.anarres:jcpp:1.4.14'
    modRuntimeOnly 'io.github.douira:glsl-transformer:2.0.0-pre13'
    modRuntimeOnly 'net.java.dev.jna:jna:5.9.0'
}
processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}
def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
import org.gradle.internal.os.OperatingSystem
project.ext.lwjglVersion = "3.3.1"
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}
repositories {
    mavenCentral()
}
project.ext.lwjglNatives = "natives-windows"
dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    include(implementation("org.lwjgl:lwjgl-meshoptimizer"))
    include(implementation("org.lwjgl:lwjgl-vma"))
    include(implementation("org.lwjgl:lwjgl-vulkan"))
    include(implementation("org.lwjgl:lwjgl-shaderc"))
    include(implementation("org.lwjgl:lwjgl-spvc"))
    include(runtimeOnly("org.lwjgl:lwjgl-meshoptimizer:$lwjglVersion:$lwjglNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$lwjglNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$lwjglNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-spvc:$lwjglVersion:$lwjglNatives"))
    include(implementation("org.lwjgl:lwjgl-meshoptimizer:$lwjglVersion:$lwjglNatives"))
    include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion:$lwjglNatives"))
    include(implementation("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$lwjglNatives"))
    include(implementation("org.lwjgl:lwjgl-spvc:$lwjglVersion:$lwjglNatives"))
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-opengl"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
}
project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.4"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"
dependencies {
    include(implementation("org.lwjgl:lwjgl:$lwjglVersion"))
    include(implementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
    include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
    include(implementation("org.joml:joml:${jomlVersion}"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))
    include(implementation("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$winNatives"))
    include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$linuxNatives"))
}
